# amcl:
#   ros__parameters:
#     use_sim_time: true
#     base_frame_id: "catamaran/base_link"
#     odom_frame_id: odom
#     global_frame_id: map

bt_navigator:
  ros__parameters:
    global_frame_id: map
    robot_base_frame: "catamaran/base_link"

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0

controller_server:
  ros__parameters:
    expected_controller_frequency: 20.0
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25

    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      # Required critics
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0
      # Other DWB parameters
      max_vel_x: 1.0
      min_vel_x: -1.0
      max_vel_y: 0.5
      min_vel_y: -0.5
      max_vel_theta: 1.0
      min_vel_theta: -1.0
      acc_lim_x: 1.0
      acc_lim_y: 0.0
      acc_lim_theta: 1.0

local_costmap:
  local_costmap:
    ros__parameters:
      transform_tolerance: 1.0
      update_frequency: 20.0
      publish_frequency: 20.0
      global_frame: odom
      robot_base_frame: "catamaran/base_link"
      rolling_window: true
      width: 50
      height: 50
      origin_x: &x_pos -30.0
      origin_y: &y_pos -10.0
      resolution: 0.07
      robot_radius: 3.0
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 3.1
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 9.5
          obstacle_min_range: 0.0
      always_send_full_costmap: True

# GPS WPF CHANGE: Remove static layer
# GPS WPF CHANGE: Set rolling global costmap with 50x50 size. See note below
global_costmap:
  global_costmap:
    ros__parameters:
      transform_tolerance: 1.0
      update_frequency: 20.0
      publish_frequency: 20.0
      global_frame: map
      robot_base_frame: "catamaran/base_link"
      robot_radius: 3.0
      resolution: 0.07
      origin_x: -45.0
      origin_y: -30.0
      # When using GPS navigation you will potentially traverse huge environments which are not practical to
      # fit on a big static costmap. Thus it is recommended to use a rolling global costmap large enough to
      # contain each pair of successive waypoints. See: https://github.com/ros-planning/navigation2/issues/2174
      rolling_window: false
      width: 80
      height: 80
      track_unknown_space: true
      # no static map
      plugins: ["obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 9.5
          obstacle_min_range: 0.0
          # outdoors there will probably be more inf points
          inf_is_valid: true
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 3.1
      always_send_full_costmap: True